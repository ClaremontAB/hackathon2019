// <auto-generated />
using System;
using ComputerVision.Data2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComputerVision.Data2.Migrations
{
    [DbContext(typeof(ComputerVisionContext))]
    [Migration("20181011080043_Migration12")]
    partial class Migration12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComputerVision.Data2.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Confidence");

                    b.Property<int?>("FaceAttributesId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FaceAttributesId");

                    b.ToTable("Accessory");
                });

            modelBuilder.Entity("ComputerVision.Data2.AdultInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdultScore");

                    b.Property<bool>("IsAdultContent");

                    b.Property<bool>("IsRacyContent");

                    b.Property<double>("RacyScore");

                    b.HasKey("Id");

                    b.ToTable("AdultInfo");
                });

            modelBuilder.Entity("ComputerVision.Data2.Blur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlurLevel");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Blur");
                });

            modelBuilder.Entity("ComputerVision.Data2.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DetailId");

                    b.Property<int?>("ImageAnalysisId");

                    b.Property<string>("Name");

                    b.Property<double>("Score");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("ImageAnalysisId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ComputerVision.Data2.CategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("CategoryDetail");
                });

            modelBuilder.Entity("ComputerVision.Data2.CelebritiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryDetailId");

                    b.Property<double>("Confidence");

                    b.Property<int?>("FaceRectangleId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryDetailId");

                    b.HasIndex("FaceRectangleId");

                    b.ToTable("CelebritiesModel");
                });

            modelBuilder.Entity("ComputerVision.Data2.ColorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccentColor");

                    b.Property<string>("DominantColorBackground");

                    b.Property<string>("DominantColorForeground");

                    b.Property<string>("DominantColors");

                    b.Property<bool>("IsBWImg");

                    b.HasKey("Id");

                    b.ToTable("ColorInfo");
                });

            modelBuilder.Entity("ComputerVision.Data2.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("X");

                    b.Property<double>("Y");

                    b.HasKey("Id");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("ComputerVision.Data2.DetectedFace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FaceAttributesId");

                    b.Property<Guid?>("FaceId");

                    b.Property<int?>("FaceLandmarksId");

                    b.Property<int?>("FaceRectangleId");

                    b.Property<int>("ImageFileId");

                    b.HasKey("Id");

                    b.HasIndex("FaceAttributesId");

                    b.HasIndex("FaceLandmarksId");

                    b.HasIndex("FaceRectangleId");

                    b.ToTable("DetectedFace");
                });

            modelBuilder.Entity("ComputerVision.Data2.Emotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Anger");

                    b.Property<double>("Contempt");

                    b.Property<double>("Disgust");

                    b.Property<double>("Fear");

                    b.Property<double>("Happiness");

                    b.Property<double>("Neutral");

                    b.Property<double>("Sadness");

                    b.Property<double>("Surprise");

                    b.HasKey("Id");

                    b.ToTable("Emotion");
                });

            modelBuilder.Entity("ComputerVision.Data2.Exposure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExposureLevel");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Exposure");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Age");

                    b.Property<int?>("BlurId");

                    b.Property<int?>("EmotionId");

                    b.Property<int?>("ExposureId");

                    b.Property<int?>("FacialHairId");

                    b.Property<int?>("Gender");

                    b.Property<int?>("Glasses");

                    b.Property<int?>("HairId");

                    b.Property<int?>("HeadPoseId");

                    b.Property<int?>("MakeupId");

                    b.Property<int?>("NoiseId");

                    b.Property<int?>("OcclusionId");

                    b.Property<double?>("Smile");

                    b.HasKey("Id");

                    b.HasIndex("BlurId");

                    b.HasIndex("EmotionId");

                    b.HasIndex("ExposureId");

                    b.HasIndex("FacialHairId");

                    b.HasIndex("HairId");

                    b.HasIndex("HeadPoseId");

                    b.HasIndex("MakeupId");

                    b.HasIndex("NoiseId");

                    b.HasIndex("OcclusionId");

                    b.ToTable("FaceAttributes");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<int?>("FaceRectangleId");

                    b.Property<int?>("Gender");

                    b.Property<int?>("ImageAnalysisId");

                    b.HasKey("Id");

                    b.HasIndex("FaceRectangleId");

                    b.HasIndex("ImageAnalysisId");

                    b.ToTable("FaceDescription");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceLandmarks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EyeLeftBottomId");

                    b.Property<int?>("EyeLeftInnerId");

                    b.Property<int?>("EyeLeftOuterId");

                    b.Property<int?>("EyeLeftTopId");

                    b.Property<int?>("EyeRightBottomId");

                    b.Property<int?>("EyeRightInnerId");

                    b.Property<int?>("EyeRightOuterId");

                    b.Property<int?>("EyeRightTopId");

                    b.Property<int?>("EyebrowLeftInnerId");

                    b.Property<int?>("EyebrowLeftOuterId");

                    b.Property<int?>("EyebrowRightInnerId");

                    b.Property<int?>("EyebrowRightOuterId");

                    b.Property<int?>("MouthLeftId");

                    b.Property<int?>("MouthRightId");

                    b.Property<int?>("NoseLeftAlarOutTipId");

                    b.Property<int?>("NoseLeftAlarTopId");

                    b.Property<int?>("NoseRightAlarOutTipId");

                    b.Property<int?>("NoseRightAlarTopId");

                    b.Property<int?>("NoseRootLeftId");

                    b.Property<int?>("NoseRootRightId");

                    b.Property<int?>("NoseTipId");

                    b.Property<int?>("PupilLeftId");

                    b.Property<int?>("PupilRightId");

                    b.Property<int?>("UnderLipBottomId");

                    b.Property<int?>("UnderLipTopId");

                    b.Property<int?>("UpperLipBottomId");

                    b.Property<int?>("UpperLipTopId");

                    b.HasKey("Id");

                    b.HasIndex("EyeLeftBottomId");

                    b.HasIndex("EyeLeftInnerId");

                    b.HasIndex("EyeLeftOuterId");

                    b.HasIndex("EyeLeftTopId");

                    b.HasIndex("EyeRightBottomId");

                    b.HasIndex("EyeRightInnerId");

                    b.HasIndex("EyeRightOuterId");

                    b.HasIndex("EyeRightTopId");

                    b.HasIndex("EyebrowLeftInnerId");

                    b.HasIndex("EyebrowLeftOuterId");

                    b.HasIndex("EyebrowRightInnerId");

                    b.HasIndex("EyebrowRightOuterId");

                    b.HasIndex("MouthLeftId");

                    b.HasIndex("MouthRightId");

                    b.HasIndex("NoseLeftAlarOutTipId");

                    b.HasIndex("NoseLeftAlarTopId");

                    b.HasIndex("NoseRightAlarOutTipId");

                    b.HasIndex("NoseRightAlarTopId");

                    b.HasIndex("NoseRootLeftId");

                    b.HasIndex("NoseRootRightId");

                    b.HasIndex("NoseTipId");

                    b.HasIndex("PupilLeftId");

                    b.HasIndex("PupilRightId");

                    b.HasIndex("UnderLipBottomId");

                    b.HasIndex("UnderLipTopId");

                    b.HasIndex("UpperLipBottomId");

                    b.HasIndex("UpperLipTopId");

                    b.ToTable("FaceLandmarks");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceRectangle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Height");

                    b.Property<int>("Left");

                    b.Property<int>("Top");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("FaceRectangle");
                });

            modelBuilder.Entity("ComputerVision.Data2.FacialHair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Beard");

                    b.Property<double>("Moustache");

                    b.Property<double>("Sideburns");

                    b.HasKey("Id");

                    b.ToTable("FacialHair");
                });

            modelBuilder.Entity("ComputerVision.Data2.Hair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bald");

                    b.Property<bool>("Invisible");

                    b.HasKey("Id");

                    b.ToTable("Hair");
                });

            modelBuilder.Entity("ComputerVision.Data2.HairColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color");

                    b.Property<double>("Confidence");

                    b.Property<int?>("HairId");

                    b.HasKey("Id");

                    b.HasIndex("HairId");

                    b.ToTable("HairColor");
                });

            modelBuilder.Entity("ComputerVision.Data2.HeadPose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Pitch");

                    b.Property<double>("Roll");

                    b.Property<double>("Yaw");

                    b.HasKey("Id");

                    b.ToTable("HeadPose");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdultId");

                    b.Property<int?>("ColorId");

                    b.Property<int?>("DescriptionId");

                    b.Property<int?>("ImageTypeId");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("AdultId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageTypeId");

                    b.HasIndex("MetadataId");

                    b.ToTable("ImageAnalysis");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageCaption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Confidence");

                    b.Property<int?>("ImageDescriptionDetailsId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ImageDescriptionDetailsId");

                    b.ToTable("ImageCaption");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageDescriptionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tags");

                    b.HasKey("Id");

                    b.ToTable("ImageDescriptionDetails");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnylysisId");

                    b.Property<string>("CameraManufacturer");

                    b.Property<string>("CameraModel");

                    b.Property<string>("ContentType");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset>("DateModified");

                    b.Property<DateTimeOffset>("DateTaken");

                    b.Property<string>("DisplayName");

                    b.Property<string>("DisplayType");

                    b.Property<string>("FileType");

                    b.Property<string>("FolderRelativeId");

                    b.Property<int?>("HandwrittenRecognitionResultId");

                    b.Property<string>("HashString");

                    b.Property<long>("Height");

                    b.Property<string>("ImageSasToken");

                    b.Property<string>("ImageUri");

                    b.Property<string>("ImageUriWithSasToken");

                    b.Property<bool>("IsAvailable");

                    b.Property<DateTimeOffset>("ItemDate");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name");

                    b.Property<string>("Orientation");

                    b.Property<string>("Path");

                    b.Property<int?>("PrintedRecognitionResultId");

                    b.Property<long>("Rating");

                    b.Property<decimal>("Size")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("Title");

                    b.Property<long>("Width");

                    b.HasKey("Id");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Format");

                    b.Property<int>("Height");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("ImageMetadata");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Confidence");

                    b.Property<string>("Hint");

                    b.Property<int?>("ImageAnalysisId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ImageAnalysisId");

                    b.ToTable("ImageTag");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClipArtType");

                    b.Property<int>("LineDrawingType");

                    b.HasKey("Id");

                    b.ToTable("ImageType");
                });

            modelBuilder.Entity("ComputerVision.Data2.LandmarksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryDetailId");

                    b.Property<double>("Confidence");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryDetailId");

                    b.ToTable("LandmarksModel");
                });

            modelBuilder.Entity("ComputerVision.Data2.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoundingBox");

                    b.Property<int?>("RecognitionResultId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("RecognitionResultId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("ComputerVision.Data2.Makeup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EyeMakeup");

                    b.Property<bool>("LipMakeup");

                    b.HasKey("Id");

                    b.ToTable("Makeup");
                });

            modelBuilder.Entity("ComputerVision.Data2.Noise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NoiseLevel");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Noise");
                });

            modelBuilder.Entity("ComputerVision.Data2.Occlusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EyeOccluded");

                    b.Property<bool>("ForeheadOccluded");

                    b.Property<bool>("MouthOccluded");

                    b.HasKey("Id");

                    b.ToTable("Occlusion");
                });

            modelBuilder.Entity("ComputerVision.Data2.RecognitionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("RecognitionResult");
                });

            modelBuilder.Entity("ComputerVision.Data2.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoundingBox");

                    b.Property<int?>("LineId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("ComputerVision.Data2.Accessory", b =>
                {
                    b.HasOne("ComputerVision.Data2.FaceAttributes")
                        .WithMany("Accessories")
                        .HasForeignKey("FaceAttributesId");
                });

            modelBuilder.Entity("ComputerVision.Data2.Category", b =>
                {
                    b.HasOne("ComputerVision.Data2.CategoryDetail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailId");

                    b.HasOne("ComputerVision.Data2.ImageAnalysis")
                        .WithMany("Categories")
                        .HasForeignKey("ImageAnalysisId");
                });

            modelBuilder.Entity("ComputerVision.Data2.CelebritiesModel", b =>
                {
                    b.HasOne("ComputerVision.Data2.CategoryDetail")
                        .WithMany("Celebrities")
                        .HasForeignKey("CategoryDetailId");

                    b.HasOne("ComputerVision.Data2.FaceRectangle", "FaceRectangle")
                        .WithMany()
                        .HasForeignKey("FaceRectangleId");
                });

            modelBuilder.Entity("ComputerVision.Data2.DetectedFace", b =>
                {
                    b.HasOne("ComputerVision.Data2.FaceAttributes", "FaceAttributes")
                        .WithMany()
                        .HasForeignKey("FaceAttributesId");

                    b.HasOne("ComputerVision.Data2.FaceLandmarks", "FaceLandmarks")
                        .WithMany()
                        .HasForeignKey("FaceLandmarksId");

                    b.HasOne("ComputerVision.Data2.FaceRectangle", "FaceRectangle")
                        .WithMany()
                        .HasForeignKey("FaceRectangleId");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceAttributes", b =>
                {
                    b.HasOne("ComputerVision.Data2.Blur", "Blur")
                        .WithMany()
                        .HasForeignKey("BlurId");

                    b.HasOne("ComputerVision.Data2.Emotion", "Emotion")
                        .WithMany()
                        .HasForeignKey("EmotionId");

                    b.HasOne("ComputerVision.Data2.Exposure", "Exposure")
                        .WithMany()
                        .HasForeignKey("ExposureId");

                    b.HasOne("ComputerVision.Data2.FacialHair", "FacialHair")
                        .WithMany()
                        .HasForeignKey("FacialHairId");

                    b.HasOne("ComputerVision.Data2.Hair", "Hair")
                        .WithMany()
                        .HasForeignKey("HairId");

                    b.HasOne("ComputerVision.Data2.HeadPose", "HeadPose")
                        .WithMany()
                        .HasForeignKey("HeadPoseId");

                    b.HasOne("ComputerVision.Data2.Makeup", "Makeup")
                        .WithMany()
                        .HasForeignKey("MakeupId");

                    b.HasOne("ComputerVision.Data2.Noise", "Noise")
                        .WithMany()
                        .HasForeignKey("NoiseId");

                    b.HasOne("ComputerVision.Data2.Occlusion", "Occlusion")
                        .WithMany()
                        .HasForeignKey("OcclusionId");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceDescription", b =>
                {
                    b.HasOne("ComputerVision.Data2.FaceRectangle", "FaceRectangle")
                        .WithMany()
                        .HasForeignKey("FaceRectangleId");

                    b.HasOne("ComputerVision.Data2.ImageAnalysis")
                        .WithMany("Faces")
                        .HasForeignKey("ImageAnalysisId");
                });

            modelBuilder.Entity("ComputerVision.Data2.FaceLandmarks", b =>
                {
                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeLeftBottom")
                        .WithMany()
                        .HasForeignKey("EyeLeftBottomId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeLeftInner")
                        .WithMany()
                        .HasForeignKey("EyeLeftInnerId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeLeftOuter")
                        .WithMany()
                        .HasForeignKey("EyeLeftOuterId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeLeftTop")
                        .WithMany()
                        .HasForeignKey("EyeLeftTopId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeRightBottom")
                        .WithMany()
                        .HasForeignKey("EyeRightBottomId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeRightInner")
                        .WithMany()
                        .HasForeignKey("EyeRightInnerId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeRightOuter")
                        .WithMany()
                        .HasForeignKey("EyeRightOuterId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyeRightTop")
                        .WithMany()
                        .HasForeignKey("EyeRightTopId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyebrowLeftInner")
                        .WithMany()
                        .HasForeignKey("EyebrowLeftInnerId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyebrowLeftOuter")
                        .WithMany()
                        .HasForeignKey("EyebrowLeftOuterId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyebrowRightInner")
                        .WithMany()
                        .HasForeignKey("EyebrowRightInnerId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "EyebrowRightOuter")
                        .WithMany()
                        .HasForeignKey("EyebrowRightOuterId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "MouthLeft")
                        .WithMany()
                        .HasForeignKey("MouthLeftId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "MouthRight")
                        .WithMany()
                        .HasForeignKey("MouthRightId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseLeftAlarOutTip")
                        .WithMany()
                        .HasForeignKey("NoseLeftAlarOutTipId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseLeftAlarTop")
                        .WithMany()
                        .HasForeignKey("NoseLeftAlarTopId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseRightAlarOutTip")
                        .WithMany()
                        .HasForeignKey("NoseRightAlarOutTipId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseRightAlarTop")
                        .WithMany()
                        .HasForeignKey("NoseRightAlarTopId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseRootLeft")
                        .WithMany()
                        .HasForeignKey("NoseRootLeftId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseRootRight")
                        .WithMany()
                        .HasForeignKey("NoseRootRightId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "NoseTip")
                        .WithMany()
                        .HasForeignKey("NoseTipId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "PupilLeft")
                        .WithMany()
                        .HasForeignKey("PupilLeftId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "PupilRight")
                        .WithMany()
                        .HasForeignKey("PupilRightId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "UnderLipBottom")
                        .WithMany()
                        .HasForeignKey("UnderLipBottomId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "UnderLipTop")
                        .WithMany()
                        .HasForeignKey("UnderLipTopId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "UpperLipBottom")
                        .WithMany()
                        .HasForeignKey("UpperLipBottomId");

                    b.HasOne("ComputerVision.Data2.Coordinate", "UpperLipTop")
                        .WithMany()
                        .HasForeignKey("UpperLipTopId");
                });

            modelBuilder.Entity("ComputerVision.Data2.HairColor", b =>
                {
                    b.HasOne("ComputerVision.Data2.Hair")
                        .WithMany("HairColor")
                        .HasForeignKey("HairId");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageAnalysis", b =>
                {
                    b.HasOne("ComputerVision.Data2.AdultInfo", "Adult")
                        .WithMany()
                        .HasForeignKey("AdultId");

                    b.HasOne("ComputerVision.Data2.ColorInfo", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("ComputerVision.Data2.ImageDescriptionDetails", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("ComputerVision.Data2.ImageType", "ImageType")
                        .WithMany()
                        .HasForeignKey("ImageTypeId");

                    b.HasOne("ComputerVision.Data2.ImageMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageCaption", b =>
                {
                    b.HasOne("ComputerVision.Data2.ImageDescriptionDetails")
                        .WithMany("Captions")
                        .HasForeignKey("ImageDescriptionDetailsId");
                });

            modelBuilder.Entity("ComputerVision.Data2.ImageTag", b =>
                {
                    b.HasOne("ComputerVision.Data2.ImageAnalysis")
                        .WithMany("Tags")
                        .HasForeignKey("ImageAnalysisId");
                });

            modelBuilder.Entity("ComputerVision.Data2.LandmarksModel", b =>
                {
                    b.HasOne("ComputerVision.Data2.CategoryDetail")
                        .WithMany("Landmarks")
                        .HasForeignKey("CategoryDetailId");
                });

            modelBuilder.Entity("ComputerVision.Data2.Line", b =>
                {
                    b.HasOne("ComputerVision.Data2.RecognitionResult")
                        .WithMany("Lines")
                        .HasForeignKey("RecognitionResultId");
                });

            modelBuilder.Entity("ComputerVision.Data2.Word", b =>
                {
                    b.HasOne("ComputerVision.Data2.Line")
                        .WithMany("Words")
                        .HasForeignKey("LineId");
                });
#pragma warning restore 612, 618
        }
    }
}
